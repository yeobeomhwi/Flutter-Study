import 'package:firebase_auth/firebase_auth.dart';import 'package:firebase_messaging/firebase_messaging.dart';import 'package:flutter/material.dart';import 'package:firebase_core/firebase_core.dart';import 'package:flutter_local_notifications/flutter_local_notifications.dart';import 'package:studyfluter/Day-24/firebasecloudmessaging_background.dart';import 'firebase_options.dart';import 'package:timezone/data/latest_all.dart' as tz;import 'package:timezone/timezone.dart' as tz;@pragma('vm:entry-point')Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {  await Firebase.initializeApp();  print("Handling a background message: ${message.messageId}");  const DarwinNotificationDetails iosDetails = DarwinNotificationDetails();  // Only show the notification once  const AndroidNotificationDetails androidDetails = AndroidNotificationDetails(    'test_channel123',    'Message Notifications',    channelDescription: 'This channel is used for message notifications',    importance: Importance.max,    priority: Priority.high,  );  const NotificationDetails notificationDetails = NotificationDetails(    android: androidDetails,    iOS: iosDetails,  );  await flutterLocalNotificationsPlugin.show(    0,    '즉시 알림 제목',    '즉시 알림 내용',    notificationDetails,    payload: '즉시 알림 페이로드',  );}void main() async {  WidgetsFlutterBinding.ensureInitialized();  await Firebase.initializeApp(    options: DefaultFirebaseOptions.currentPlatform,  );  // 타임존 데이터 초기화  tz.initializeTimeZones();  tz.setLocalLocation(tz.getLocation('Asia/Seoul'));  // 안드로이드와 iOS 알림 초기화 설정  const AndroidInitializationSettings androidInitializationSettings =      AndroidInitializationSettings('@mipmap/ic_launcher');  const DarwinInitializationSettings darwinInitializationSettings =      DarwinInitializationSettings(    requestAlertPermission: true,    requestBadgePermission: true,    requestSoundPermission: true,  );  const InitializationSettings initializationSettings = InitializationSettings(    android: androidInitializationSettings,    iOS: darwinInitializationSettings,  );  await flutterLocalNotificationsPlugin.initialize(    initializationSettings,    onDidReceiveNotificationResponse: onDidReceiveNotificationResponse,  );  // Android용 알림 채널 생성  const AndroidNotificationChannel channel = AndroidNotificationChannel(    'test_channel123',    'test_channel123',    description: '테스트 채널 입니다',    importance: Importance.max,  );  //안드로이드 noti 플러그인 생성  final AndroidFlutterLocalNotificationsPlugin?      androidFlutterLocalNotificationsPlugin =      flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<          AndroidFlutterLocalNotificationsPlugin>();  //채널 생성  if (androidFlutterLocalNotificationsPlugin != null) {    await androidFlutterLocalNotificationsPlugin        .createNotificationChannel(channel);  }  //=====토큰처리==========  FirebaseMessaging messaging = FirebaseMessaging.instance;  String? token = await messaging.getToken();  print('======FCM 토큰 : ${token}=====');  // 포그라운드 상태에서 수신  FirebaseMessaging.onMessage.listen((RemoteMessage message) {    print('Got a message whilst in the foreground!');    print('Message data: ${message.data}');    if (message.notification != null) {      print('Message also contained a notification : ${message.notification}');      RemoteNotification? notification = message.notification;      AndroidNotification? android = message.notification?.android;      if (notification != null && android != null) {        flutterLocalNotificationsPlugin.show(          notification.hashCode,          notification.title,          notification.body,          NotificationDetails(            android: AndroidNotificationDetails(              channel.id,              channel.name,              channelDescription: channel.description,              importance: Importance.max,              priority: Priority.high,              icon: '@mipmap/ic_launcher',            ),          ),        );      }    }  });  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);  runApp(Firebasecloudmessaging_background());}
import 'package:flutter/material.dart';import 'package:firebase_auth/firebase_auth.dart';import 'package:google_sign_in/google_sign_in.dart';import 'package:sign_in_button/sign_in_button.dart';class LoginApp extends StatelessWidget {  @override  Widget build(BuildContext context) {    return MaterialApp(      title: 'Login Example',      theme: ThemeData(        primarySwatch: Colors.blue,      ),      home: const LoginScreen(),    );  }}class LoginScreen extends StatefulWidget {  const LoginScreen({super.key});  @override  _LoginScreenState createState() => _LoginScreenState();}class _LoginScreenState extends State<LoginScreen> {  final FirebaseAuth _auth = FirebaseAuth.instance;  final TextEditingController _emailController = TextEditingController();  final TextEditingController _passwordController = TextEditingController();  String _loginStatus = "로그인이 안 됐습니다.";  Future<void> loginUser(String email, String password) async {    try {      final userCredential = await _auth.signInWithEmailAndPassword(        email: email,        password: password,      );      // 로그인 성공 시 상태 업데이트      setState(() {        _loginStatus = "이메일 로그인에 성공했습니다.";      });    } on FirebaseAuthException catch (e) {      if (e.code == 'user-not-found') {        setState(() {          _loginStatus = '해당 이메일로 등록된 사용자가 없습니다.';        });      } else if (e.code == 'wrong-password') {        setState(() {          _loginStatus = '잘못된 비밀번호입니다.';        });      }    } catch (e) {      setState(() {        _loginStatus = '로그인 중 오류가 발생했습니다.';      });    }  }  Future<void> signInWithGoogle() async {    try {      // Trigger the authentication flow      final GoogleSignInAccount? googleUser = await GoogleSignIn().signIn();      // Obtain the auth details from the request      final GoogleSignInAuthentication? googleAuth =          await googleUser?.authentication;      // Create a new credential      final credential = GoogleAuthProvider.credential(        accessToken: googleAuth?.accessToken,        idToken: googleAuth?.idToken,      );      // Once signed in, return the UserCredential      await FirebaseAuth.instance.signInWithCredential(credential);      // Update login status upon successful Google sign-in      setState(() {        _loginStatus = "구글 로그인에 성공했습니다.";      });    } catch (e) {      setState(() {        _loginStatus = '구글 로그인 중 오류가 발생했습니다.';      });    }  }  Future<void> anonymousLogin() async {    try {      final userCredential = await FirebaseAuth.instance.signInAnonymously();      print("Signed in with temporary account.");      setState(() {        _loginStatus = "익명으로 로그인 하였습니다.";      });    } on FirebaseAuthException catch (e) {      switch (e.code) {        case "operation-not-allowed":          print("Anonymous auth hasn't been enabled for this project.");          break;        default:          print("Unknown error.");      }    }  }  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: AppBar(        title: const Text('Login Example'),      ),      body: Padding(        padding: const EdgeInsets.all(16.0),        child: Column(          mainAxisAlignment: MainAxisAlignment.center,          children: [            TextField(              controller: _emailController,              decoration: const InputDecoration(                labelText: '이메일',              ),            ),            TextField(              controller: _passwordController,              decoration: const InputDecoration(                labelText: '비밀번호',              ),              obscureText: true,            ),            const SizedBox(height: 20),            SignInButton(              Buttons.anonymous,              onPressed: () {                anonymousLogin();              },            ),            SignInButton(              Buttons.email,              onPressed: () {                loginUser(_emailController.text, _passwordController.text);              },            ),            SignInButton(              Buttons.google,              onPressed: () {                signInWithGoogle();              },            ),            const SizedBox(height: 20),            Text(              _loginStatus,              style: const TextStyle(fontSize: 16),            ),            const SizedBox(height: 20),            Text(              '아이디: ${_emailController.text}\n비밀번호: ${_passwordController.text}',              style: const TextStyle(fontSize: 16),            ),          ],        ),      ),    );  }}
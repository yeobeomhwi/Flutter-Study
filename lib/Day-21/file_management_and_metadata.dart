import 'dart:io';import 'package:firebase_core/firebase_core.dart';import 'package:firebase_storage/firebase_storage.dart';import 'package:flutter/material.dart';import 'package:file_picker/file_picker.dart';class FileManagementAndMetadata extends StatelessWidget {  @override  Widget build(BuildContext context) {    return MaterialApp(      title: 'Cloud Storage File Management',      theme: ThemeData(        primarySwatch: Colors.blue,      ),      home: FileManagementPage(),    );  }}class FileManagementPage extends StatefulWidget {  @override  _FileManagementPageState createState() => _FileManagementPageState();}class _FileManagementPageState extends State<FileManagementPage> {  String _fileName = '';  String _statusMessage = '';  String _metadataMessage = '';  bool _isUploading = false;  bool _isFetchingMetadata = false;  bool _hasError = false;  Future<void> _selectFile() async {    final result = await FilePicker.platform.pickFiles();    if (result != null && result.files.isNotEmpty) {      setState(() {        _fileName = result.files.single.name;        _statusMessage = 'File selected: ${_fileName}';      });    }  }  Future<void> _uploadFile() async {    if (_fileName.isEmpty) {      setState(() {        _statusMessage = 'No file selected.';      });      return;    }    setState(() {      _isUploading = true;      _hasError = false;    });    try {      // 파일 업로드를 구현하세요.      final storageRef =          FirebaseStorage.instance.ref().child('uploads/$_fileName');      final uploadTask = storageRef.putFile(File(_fileName));      await uploadTask;      setState(() {        _statusMessage = 'File uploaded successfully.';      });    } catch (e) {      setState(() {        _statusMessage = 'Failed to upload file: $e';        _hasError = true;      });    } finally {      setState(() {        _isUploading = false;      });    }  }  Future<void> _fetchMetadata() async {    if (_fileName.isEmpty) {      setState(() {        _metadataMessage = 'No file selected.';      });      return;    }    setState(() {      _isFetchingMetadata = true;      _hasError = false;    });    try {      // 메타데이터 읽고 표시되도록 구현하세요.      final storageRef =          FirebaseStorage.instance.ref().child("uploads/$_fileName");      final metadata = await storageRef.getMetadata();      await storageRef.delete();      setState(() {        _metadataMessage = 'File Metadata:\n'            'Name: ${metadata.name}\n'            'Size: ${metadata.size} bytes\n'            'Content Type: ${metadata.contentType}\n'            'Custom Metadata: ${metadata.customMetadata}';      });    } catch (e) {      setState(() {        _metadataMessage = 'Failed to fetch metadata: $e';        _hasError = true;      });    } finally {      setState(() {        _isFetchingMetadata = false;      });    }  }  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: AppBar(        title: Text('File Management and Metadata'),      ),      body: Center(        child: Padding(          padding: const EdgeInsets.all(16.0),          child: Column(            mainAxisAlignment: MainAxisAlignment.center,            children: <Widget>[              ElevatedButton(                onPressed: _selectFile,                child: Text('Select File'),              ),              SizedBox(height: 20),              ElevatedButton(                onPressed: _uploadFile,                child: Text('Upload File'),              ),              SizedBox(height: 20),              ElevatedButton(                onPressed: _fetchMetadata,                child: Text('Fetch File Metadata'),              ),              SizedBox(height: 20),              if (_isUploading || _isFetchingMetadata)                CircularProgressIndicator(),              SizedBox(height: 20),              Text(_statusMessage),              SizedBox(height: 20),              Text(_metadataMessage),            ],          ),        ),      ),    );  }}